{"version":3,"sources":["api/http.js","api/users.js","pages/LoginPage.js","pages/RegistrationPage.js","redux/actions.js","api/levels.js","components/LargeLoader.js","components/Title.js","pages/LevelsPage.js","components/Header.js","pages/CreateLevelPage.js","api/programs.js","components/Map.js","pages/LevelPage.js","pages/CreateProgramPage.js","pages/ProgramPage.js","App.js","serviceWorker.js","redux/state.js","index.js","pages/drone.jpg"],"names":["get","url","a","fetch","headers","response","processResponse","post","body","method","JSON","stringify","status","startsWith","console","log","json","success","message","isAuthenticated","authenticate","login","password","register","name","logout","loginInput","passwordInput","useStyles","makeStyles","theme","root","height","image","backgroundImage","DroneImage","backgroundRepeat","backgroundSize","backgroundPosition","paper","margin","spacing","display","flexDirection","alignItems","avatar","backgroundColor","palette","secondary","main","form","width","marginTop","submit","LoginPage","props","classes","onKeyPress","event","key","preventDefault","onLoginButtonClick","value","Grid","container","component","className","CssBaseline","item","xs","sm","md","Paper","elevation","square","Avatar","Typography","variant","TextField","required","fullWidth","id","label","autoComplete","autoFocus","InputProps","inputRef","node","type","Button","color","onClick","Link","children","to","nameInput","RegistrationPage","onRegistrationButtonClick","noValidate","LOGIN","LOGOUT","SHOW_MESSAGE","createLevel","title","map","getLevels","getLevel","levelId","LargeLoader","justifyContent","CircularProgress","padding","Title","gutterBottom","LevelsPage","state","isLoaded","levels","this","showMessage","setState","LevelsPageLayout","dispatch","Component","Container","maxWidth","List","aria-label","ListItem","button","ListItemAvatar","ListItemText","level","connect","mapDispatchToProps","flexGrow","menuButton","marginRight","usernameContainer","alignContent","textTransform","boxSizing","verticalAlign","fontSize","username","fontWeight","paddingLeft","titleLink","textDecoration","cursor","Header","AppBar","position","Toolbar","style","AccountCircle","user","size","onLogoutButtonClick","titleInput","mapInput","CreateLevelPage","onCreateLevelButtonClick","bind","nextProps","nextState","nextContext","history","push","CreateLevelPageLayout","helperText","CreateLevelPageWrapper","ComponentWithConnect","ComponentWithRouter","withRouter","createProgram","sourceCode","getMyPrograms","getProgram","programId","runProgram","params","getLevelRuns","Map","Math","sqrt","length","cells","i","MapLayout","marginLeft","marginBottom","row","borderTop","borderColor","borderTopColor","cell","borderRight","borderBottom","borderLeft","small","wall","result","j","Cell","Row","clsx","LevelPage","programs","runs","sort","b","score","LevelPageLayout","program","Table","stickyHeader","TableHead","TableRow","TableCell","align","TableBody","run","author","scope","useParams","sourceCodeInput","CreateProgramPage","compilationError","onCreateProgramButtonClick","CreateProgramPageLayout","multiline","rows","paragraph","CreateProgramPageWrapper","ProgramPage","runError","output","onChangeParam","onRunProgram","runErrorMessage","paramIndex","index","newValue","s","paramsMap","forEach","error","errorMessage","ProgramPageLayout","param","onChange","target","Fragment","App","onCloseSnackbar","setUser","clearMessage","renderLayoutForNonAuthenticated","renderLayoutForAuthenticated","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","ContentProps","action","IconButton","exact","path","AppWrapper","AppWithConnect","mapStateToProps","AppWithRouter","Boolean","window","location","hostname","match","initialState","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.4e593522.chunk.js","sourcesContent":["export async function get(url) {\n    let response = await fetch(url, {\n        headers: {\n            \"Accept\": \"application/json\",\n        },\n    });\n\n    return await processResponse(response, url);\n}\n\nexport async function post(url, body) {\n    let response = await fetch(url, {\n        headers: {\n            \"Accept\": \"application/json\",\n            \"Content-Type\": \"application/json\"\n        },\n        method: \"POST\",\n        body: JSON.stringify(body)\n    });\n\n    return await processResponse(response, url);\n}\n\nasync function processResponse(response, url) {\n    if (response.status === 401 && !url.startsWith(\"/api/users\")) {\n        // Not authenticated\n        console.log('Not authenticated')\n    }\n\n    response = await response.json();\n\n    if (response.status === \"error\") {\n        // Show bubble with response[\"message\"]\n        return { success: false, message: \"message\" in response ? response.message : \"\" };\n    }\n\n    response = \"response\" in response ? response.response : response;\n    return { success: true, ...response }\n}\n\n","import {get, post} from \"./http\";\n\nexport async function isAuthenticated() {\n    return await get(\"/api/users/me\");\n}\n\nexport async function authenticate(login, password) {\n    return await post(\"/api/users/login\", {\n        login: login,\n        password: password\n    });\n}\n\nexport async function register(name, login, password) {\n    return await post(\"/api/users\", {\n        name: name,\n        login: login,\n        password: password,\n    });\n}\n\nexport async function logout() {\n    return await post(\"/api/users/logout\");\n}","import React from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {Link as RouterLink} from \"react-router-dom\"\nimport DroneImage from \"./drone.jpg\"\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        height: '100vh',\n    },\n    image: {\n        backgroundImage: `url(${DroneImage})`,\n        backgroundRepeat: 'no-repeat',\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n    },\n    paper: {\n        margin: theme.spacing(8, 4),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(1),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n}));\n\nlet loginInput;\nlet passwordInput;\n\nexport default function LoginPage(props) {\n    const classes = useStyles();\n\n    function onKeyPress(event) {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            props.onLoginButtonClick(loginInput.value, passwordInput.value);\n        }\n    }\n\n    return (\n        <Grid container component=\"main\" className={classes.root}>\n            <CssBaseline />\n            <Grid item xs={false} sm={4} md={7} className={classes.image} />\n            <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\n                <div className={classes.paper}>\n                    <Avatar className={classes.avatar}>\n                        <LockOutlinedIcon />\n                    </Avatar>\n                    <Typography component=\"h1\" variant=\"h5\">\n                        Login to drone race\n                    </Typography>\n                    <form className={classes.form}>\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            id=\"login\"\n                            label=\"Login\"\n                            name=\"login\"\n                            autoComplete=\"login\"\n                            autoFocus\n                            onKeyPress={onKeyPress}\n                            InputProps={{\n                                inputRef: node => loginInput = node\n                            }}\n                        />\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            name=\"password\"\n                            label=\"Password\"\n                            type=\"password\"\n                            id=\"password\"\n                            autoComplete=\"current-password\"\n                            onKeyPress={onKeyPress}\n                            InputProps={{\n                                inputRef: node => passwordInput = node\n                            }}\n                        />\n                        <Button\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className={classes.submit}\n                            onClick={() => props.onLoginButtonClick(loginInput.value, passwordInput.value)}\n                        >\n                            Login\n                        </Button>\n                        <Grid container>\n                            <Grid item>\n                                <Link variant=\"body2\" component={({ className, children }) => (\n                                    <RouterLink className={className} to=\"/registration\">\n                                        {children}\n                                    </RouterLink>)}>\n                                    {\"Don't have an account? Register\"}\n                                </Link>\n                            </Grid>\n                        </Grid>\n                    </form>\n                </div>\n            </Grid>\n        </Grid>\n    );\n}","import React from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {Link as RouterLink} from \"react-router-dom\";\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        height: '100vh',\n    },\n    image: {\n        backgroundImage: 'url(https://source.unsplash.com/random)',\n        backgroundRepeat: 'no-repeat',\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n    },\n    paper: {\n        margin: theme.spacing(8, 4),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(1),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n}));\n\nlet nameInput;\nlet loginInput;\nlet passwordInput;\n\nexport default function RegistrationPage(props) {\n    const classes = useStyles();\n\n    function onKeyPress(event) {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            props.onRegistrationButtonClick(nameInput.value, loginInput.value, passwordInput.value);\n        }\n    }\n\n    return (\n        <Grid container component=\"main\" className={classes.root}>\n            <CssBaseline />\n            <Grid item xs={false} sm={4} md={7} className={classes.image} />\n            <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\n                <div className={classes.paper}>\n                    <Avatar className={classes.avatar}>\n                        <LockOutlinedIcon />\n                    </Avatar>\n                    <Typography component=\"h1\" variant=\"h5\">\n                        Register to drone race\n                    </Typography>\n                    <form className={classes.form} noValidate>\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            id=\"name\"\n                            label=\"Your Name\"\n                            name=\"name\"\n                            autoComplete=\"name\"\n                            autoFocus\n                            onKeyPress={onKeyPress}\n                            InputProps={{\n                                inputRef: node => nameInput = node\n                            }}\n                        />\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            id=\"login\"\n                            label=\"Login\"\n                            name=\"login\"\n                            autoComplete=\"login\"\n                            onKeyPress={onKeyPress}\n                            InputProps={{\n                                inputRef: node => loginInput = node\n                            }}\n                        />\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            name=\"password\"\n                            label=\"Password\"\n                            type=\"password\"\n                            id=\"password\"\n                            autoComplete=\"current-password\"\n                            onKeyPress={onKeyPress}\n                            InputProps={{\n                                inputRef: node => passwordInput = node\n                            }}\n                        />\n                        <Button\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className={classes.submit}\n                            onClick={() => props.onRegistrationButtonClick(nameInput.value, loginInput.value, passwordInput.value)}\n                        >\n                            Register\n                        </Button>\n                        <Grid container>\n                            <Grid item>\n                                <Link variant=\"body2\" component={({ className, children }) => (\n                                    <RouterLink className={className} to=\"/login\">\n                                        {children}\n                                    </RouterLink>)}>\n                                    {\"Already have an account? Login\"}\n                                </Link>\n                            </Grid>\n                        </Grid>\n                    </form>\n                </div>\n            </Grid>\n        </Grid>\n    );\n}","export const LOGIN = 'LOGIN';\nexport const LOGOUT = 'LOGOUT';\nexport const SHOW_MESSAGE = 'SHOW_MESSAGE';","import {get, post} from \"./http\";\n\nexport async function createLevel(title, map) {\n    return await post(\"/api/levels\", {\n        title: title,\n        map: map\n    });\n}\n\nexport async function getLevels() {\n    return await get(\"/api/levels\");\n}\n\nexport async function getLevel(levelId) {\n    return await get(\"/api/levels/\" + levelId)\n}","import {makeStyles} from \"@material-ui/core\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport React from \"react\";\n\nexport default function LargeLoader() {\n    const classes = makeStyles(theme => ({\n        container: {\n            display: 'flex',\n            justifyContent: 'center',\n            margin: 'auto',\n            alignItems: 'center',\n            width: '100%',\n            height: '100%',\n        },\n    }))();\n\n    return <div className={classes.container}>\n        <CircularProgress/>\n    </div>\n}","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport {makeStyles} from \"@material-ui/core\";\n\nconst useStyles = makeStyles(theme => ({\n    title: {\n        padding: '10px',\n    }\n}));\n\nexport default function Title(props) {\n    let classes = useStyles();\n    return (\n        <Typography component=\"h2\" variant=\"h4\"  gutterBottom className={classes.title}>\n            {props.children}\n        </Typography>\n    );\n}","import React, {Component} from \"react\";\nimport {getLevels} from \"../api/levels\";\nimport {connect} from \"react-redux\";\nimport {SHOW_MESSAGE} from \"../redux/actions\";\nimport LargeLoader from \"../components/LargeLoader\";\nimport List from \"@material-ui/core/List\";\nimport {ListItemAvatar, ListItemText} from \"@material-ui/core\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport {Link} from \"react-router-dom\";\nimport AddIcon from \"@material-ui/icons/Add\"\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Container from \"@material-ui/core/Container\";\nimport Title from \"../components/Title\";\n\nclass LevelsPage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaded: false,\n            levels: [],\n        }\n    }\n\n    async componentDidMount() {\n        let response = await getLevels();\n        if (! response.success) {\n            this.props.showMessage(response.message ? response.message : \"Could not load levels, try later\");\n            return;\n        }\n        this.setState({\n            isLoaded: true,\n            levels: response.levels\n        });\n    }\n\n    render() {\n        if (! this.state.isLoaded)\n            return <LargeLoader/>;\n        return (\n            <LevelsPageLayout levels={this.state.levels} />\n        )\n    }\n\n    static mapDispatchToProps(dispatch) {\n        return {\n            showMessage: (message) => dispatch({type: SHOW_MESSAGE, message: message}),\n        }\n    }\n}\n\nfunction LevelsPageLayout(props) {\n    return (\n        <Container maxWidth=\"lg\">\n            <Title>Levels</Title>\n            <List component=\"nav\" aria-label=\"levels list\">\n                <ListItem button component={Link} to=\"/levels/new\">\n                    <ListItemAvatar>\n                        <Avatar>\n                            <AddIcon/>\n                        </Avatar>\n                    </ListItemAvatar>\n                    <ListItemText secondary=\"Create your own level for drone racing\">Add new level</ListItemText>\n                </ListItem>\n                {\n                    props.levels.map(level => (\n                        <ListItem key={level.id} button component={Link} to={\"/levels/\" + level.id}>\n                            <ListItemText>{level.title}</ListItemText>\n                        </ListItem>\n                    ))\n                }\n            </List>\n        </Container>\n    );\n}\n\nexport default connect(null, LevelsPage.mapDispatchToProps)(LevelsPage)","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport {AccountCircle} from \"@material-ui/icons\";\nimport {Link} from \"react-router-dom\";\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        color: 'white',\n        marginRight: theme.spacing(2),\n    },\n    usernameContainer: {\n        display: 'inline-flex',\n        justifyContent: 'center',\n        alignContent: 'center',\n        alignItems: 'center',\n        padding: '8px 11px',\n        textTransform: 'uppercase',\n        boxSizing: 'border-box',\n        verticalAlign: 'middle',\n        fontSize: '0.9375rem',\n    },\n    username: {\n        fontWeight: '500',\n        paddingLeft: '8px',\n    },\n    title: {\n        flexGrow: 1,\n    },\n    titleLink: {\n        color: 'inherit',\n        textDecoration: 'none',\n        cursor: 'pointer',\n        fontSize: 'inherit',\n        fontWeight: 'inherit',\n    }\n}));\n\nexport default function Header(props) {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        <Link to=\"/\" className={classes.titleLink}>Drone racing</Link>\n                    </Typography>\n                    <div style={{\"position\": \"relative\"}}>\n                        <div className={classes.usernameContainer}>\n                            <AccountCircle/>\n                            <div className={classes.username}>\n                                { props.user.name }\n                            </div>\n                        </div>\n\n                        <Button\n                            size=\"large\"\n                            className={classes.menuButton}\n                            onClick={props.onLogoutButtonClick}\n                        >\n                            Logout\n                        </Button>\n                    </div>\n\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n}","import React, {Component} from \"react\";\nimport {connect} from \"react-redux\";\nimport Title from \"../components/Title\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport {createLevel} from \"../api/levels\";\nimport {SHOW_MESSAGE} from \"../redux/actions\";\nimport {withRouter} from \"react-router-dom\";\n\nfunction CreateLevelPageWrapper(props) {\n    let ComponentWithConnect = connect(null, CreateLevelPage.mapDispatchToProps)(CreateLevelPage);\n    let ComponentWithRouter = withRouter(({ history }) => (<ComponentWithConnect history={history} {...props}/>));\n    return <ComponentWithRouter/>\n}\n\nclass CreateLevelPage extends Component {\n    constructor(props) {\n        super(props);\n        this.onCreateLevelButtonClick = this.onCreateLevelButtonClick.bind(this);\n    }\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        return false;\n    }\n\n    async onCreateLevelButtonClick(title, map) {\n        let response = await createLevel(title, map);\n        if (! response.success) {\n            this.props.showMessage(response.message);\n            return;\n        }\n        let levelId = response.level.id;\n        this.props.history.push(\"/levels/\" + levelId);\n    }\n\n    render() {\n        return <CreateLevelPageLayout onCreateLevelButtonClick={this.onCreateLevelButtonClick}/>\n    }\n\n    static mapDispatchToProps(dispatch) {\n        return {\n            showMessage: (message) => dispatch({type: SHOW_MESSAGE, message: message}),\n        }\n    }\n}\n\nlet titleInput;\nlet mapInput;\n\nfunction CreateLevelPageLayout(props) {\n    return (\n        <Container maxWidth=\"lg\">\n            <Title>Create new level</Title>\n            <form noValidate>\n                <Grid container spacing={2}>\n                    <Grid item xs={12} sm={6}>\n                        <TextField\n                            name=\"title\"\n                            variant=\"outlined\"\n                            required\n                            fullWidth\n                            id=\"title\"\n                            label=\"Title\"\n                            autoFocus\n                            InputProps={{\n                                inputRef: node => titleInput = node\n                            }}\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <TextField\n                            name=\"map\"\n                            variant=\"outlined\"\n                            required\n                            fullWidth\n                            id=\"map\"\n                            label=\"Map\"\n                            InputProps={{\n                                inputRef: node => mapInput = node\n                            }}\n                            helperText=\"Use . for empty cells and * for walls\"\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Button size=\"large\" variant=\"contained\" color=\"primary\" onClick={() => props.onCreateLevelButtonClick(titleInput.value, mapInput.value)}>\n                            Create level\n                        </Button>\n                    </Grid>\n                </Grid>\n\n            </form>\n        </Container>\n    )\n}\n\nexport default CreateLevelPageWrapper;","import {get, post} from \"./http\"\n\nexport async function createProgram(levelId, title, sourceCode) {\n    return await post(\"/api/programs\", {\n        levelId: levelId,\n        title: title,\n        sourceCode: sourceCode,\n    });\n}\n\nexport async function getMyPrograms(levelId) {\n    return await get(\"/api/programs?level_id=\" + levelId);\n}\n\nexport async function getProgram(programId) {\n    return await get(\"/api/programs/\" + programId)\n}\n\nexport async function runProgram(programId, params) {\n    return await post(\"/api/runs\", {\n        programId: programId,\n        params: params,\n    });\n}\n\nexport async function getLevelRuns(levelId) {\n    return await get(\"/api/runs?level_id=\" + levelId);\n}","import React, {Component} from \"react\";\nimport {makeStyles} from \"@material-ui/core\";\nimport clsx from \"clsx\";\n\nclass Map extends Component {\n    constructor(props) {\n        super(props);\n        let size = Math.sqrt(props.map.length);\n        let cells = [[]];\n        for (let i = 0; i < props.map.length; i++) {\n            cells[cells.length - 1].push(props.map[i] === '*');\n            if (i % size === size - 1)\n                cells.push([]);\n        }\n        this.state = {\n            size: size,\n            map: cells,\n        };\n    }\n\n    render() {\n        return <MapLayout size={this.state.size} map={this.state.map} />\n    }\n}\n\nconst useStyles = makeStyles(theme => ({\n    map: {\n        marginLeft: '10px',\n        marginBottom: '30px',\n    },\n    row: {\n        display: 'block',\n        '&:first-child > div': {\n            borderTop: '1px solid #ccc',\n        },\n        '&:first-child > :first-child': {\n            backgroundColor: 'green',\n            borderColor: 'green',\n            borderTopColor: '#ccc',\n        },\n        '&:last-child > :last-child': {\n            backgroundColor: 'red',\n            borderColor: 'red',\n        },\n    },\n    cell: {\n        display: 'inline-block',\n        width: '40px',\n        height: '40px',\n        borderRight: '1px solid #ccc',\n        borderBottom: '1px solid #ccc',\n        '&:first-child': {\n            borderLeft: '1px solid #ccc',\n        }\n    },\n    small: {\n        width: '20px',\n        height: '20px',\n    },\n    wall: {\n        backgroundColor: 'grey',\n        borderColor: 'grey',\n    },\n}));\n\nfunction MapLayout(props) {\n    let classes = useStyles();\n    let result = [];\n    for (let i = 0; i < props.size; i++) {\n        let row = [];\n        for (let j = 0; j < props.size; j++)\n            row.push(<Cell wall={props.map[i][j]} small={props.size >= 20} key={i + \" \" + j}/>);\n        result.push(<Row key={i}>{ row }</Row>);\n    }\n    return <div className={classes.map}>{ result }</div>;\n}\n\nfunction Row(props) {\n    let classes = useStyles();\n    return <div className={classes.row}>{ props.children }</div>;\n}\n\nfunction Cell(props) {\n    let classes = useStyles();\n    let className = clsx(classes.cell, props.wall && classes.wall, props.small && classes.small);\n    return <div className={className}>&nbsp;</div>\n}\n\nexport default Map;","import React, {Component} from \"react\";\nimport {SHOW_MESSAGE} from \"../redux/actions\";\nimport {connect} from \"react-redux\";\nimport {Link, useParams} from \"react-router-dom\";\nimport {getLevel} from \"../api/levels\";\nimport LargeLoader from \"../components/LargeLoader\";\nimport Container from \"@material-ui/core/Container\";\nimport Title from \"../components/Title\";\nimport Grid from \"@material-ui/core/Grid\";\nimport {getLevelRuns, getMyPrograms} from \"../api/programs\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport {ListItemAvatar, ListItemText, Table, TableBody, TableHead} from \"@material-ui/core\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport Map from \"../components/Map\";\n\nfunction LevelPageWrapper(props) {\n    let params = useParams();\n    return <LevelPage params={params} {...props}/>;\n}\n\nclass LevelPage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaded: false,\n            level: {},\n            programs: [],\n            runs: [],\n        }\n    }\n\n    async componentDidMount() {\n        let id = this.props.params.id;\n        let response = await getLevel(id);\n        if (! response.success) {\n            this.props.showMessage(response.message ? response.message : \"Could not load level\");\n            return;\n        }\n        let level = response.level;\n\n        response = await getMyPrograms(id);\n        if (! response.success) {\n            this.props.showMessage(response.message ? response.message : \"Could not load programs\");\n            return;\n        }\n        let programs = response.programs;\n\n        response = await getLevelRuns(id);\n        if (! response.success) {\n            this.props.showMessage(response.message ? response.message : \"Could not load runs\");\n            return;\n        }\n        let runs = response.runs.sort((a, b) => a.score - b.score);\n\n        this.setState({\n            isLoaded: true,\n            level: level,\n            programs: programs,\n            runs: runs,\n        });\n    }\n\n    render() {\n        if (! this.state.isLoaded)\n            return <LargeLoader/>;\n        return <LevelPageLayout level={this.state.level} programs={this.state.programs} runs={this.state.runs}/>\n    }\n\n    static mapDispatchToProps(dispatch) {\n        return {\n            showMessage: (message) => dispatch({type: SHOW_MESSAGE, message: message}),\n        }\n    }\n}\n\nfunction LevelPageLayout(props) {\n    return (\n        <Container maxWidth=\"lg\">\n            <Title>{ props.level.title }</Title>\n            <Map map={ props.level.map } />\n            <Grid container spacing={10}>\n                <Grid item xs={12} md={6}>\n                    <Title>Your drone programs</Title>\n                    <List>\n                        <ListItem button component={Link} to={\"/levels/\" + props.level.id + \"/program\"}>\n                            <ListItemAvatar>\n                                <Avatar>\n                                    <AddIcon/>\n                                </Avatar>\n                            </ListItemAvatar>\n                            <ListItemText secondary=\"Run your drone on this level!\">Add new program</ListItemText>\n                        </ListItem>\n                        {\n                            props.programs.map(program => (\n                                <ListItem key={program.id}>\n                                    <ListItemText>\n                                        {program.title}\n                                    </ListItemText>\n                                    <Button color={\"primary\"} component={Link} to={\"/levels/\" + props.level.id + \"/programs/\" + program.id}>\n                                        View and run\n                                    </Button>\n                                </ListItem>\n                            ))\n                        }\n                    </List>\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <Title>Scoreboard</Title>\n                    {\n                        props.runs.length > 0 &&\n                        <Table stickyHeader>\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell>AUTHOR</TableCell>\n                                    <TableCell>PROGRAM</TableCell>\n                                    <TableCell align=\"right\">MOVES</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                            {\n                                props.runs.map(run => (\n                                    <TableRow key={run.id}>\n                                        <TableCell>\n                                            {run.program.author.name}\n                                        </TableCell>\n                                        <TableCell scope=\"row\">\n                                            {run.program.title}\n                                        </TableCell>\n                                        <TableCell align=\"right\">\n                                            {run.score}\n                                        </TableCell>\n                                    </TableRow>\n                                ))\n                            }\n                            </TableBody>\n                        </Table>\n                    }\n                    {\n                        props.runs.length === 0 &&\n                        <Typography color=\"textSecondary\">\n                            No runs for a while. Be the first!\n                        </Typography>\n                    }\n                </Grid>\n            </Grid>\n        </Container>\n    );\n}\n\nexport default connect(null, LevelPage.mapDispatchToProps)(LevelPageWrapper)","import React, {Component} from \"react\";\nimport {connect} from \"react-redux\";\nimport Title from \"../components/Title\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport {getLevel} from \"../api/levels\";\nimport {SHOW_MESSAGE} from \"../redux/actions\";\nimport {useParams, withRouter} from \"react-router-dom\"\nimport LargeLoader from \"../components/LargeLoader\";\nimport {createProgram} from \"../api/programs\";\nimport {Typography} from \"@material-ui/core\";\n\nfunction CreateProgramPageWrapper(props) {\n    let params = useParams();\n    let ComponentWithConnect = connect(null, CreateProgramPage.mapDispatchToProps)(CreateProgramPage);\n    let ComponentWithRouter = withRouter(({ history }) => (<ComponentWithConnect params={params} history={history} {...props}/>));\n    return <ComponentWithRouter/>\n}\n\nclass CreateProgramPage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaded: false,\n            level: {},\n            compilationError: \"\",\n        };\n        this.onCreateProgramButtonClick = this.onCreateProgramButtonClick.bind(this);\n    }\n\n    async componentDidMount() {\n        let id = this.props.params.id;\n        let response = await getLevel(id);\n        if (! response.success) {\n            this.props.showMessage(response.message ? response.message : \"Could not load level\");\n            return;\n        }\n        let level = response.level;\n        this.setState({\n            isLoaded: true,\n            level: level,\n        })\n    }\n\n    async onCreateProgramButtonClick(levelId, title, sourceCode) {\n        let response = await createProgram(levelId, title, sourceCode);\n        if (! response.success) {\n            this.setState({\n                compilationError: response.message,\n            });\n            return;\n        }\n        let programId = response.programId;\n        this.props.history.push(\"/levels/\" + levelId + \"/programs/\" + programId);\n    }\n\n    render() {\n        if (!this.state.isLoaded)\n            return <LargeLoader/>;\n        return <CreateProgramPageLayout level={this.state.level} compilationError={this.state.compilationError} onCreateProgramButtonClick={this.onCreateProgramButtonClick}/>\n    }\n\n    static mapDispatchToProps(dispatch) {\n        return {\n            showMessage: (message) => dispatch({type: SHOW_MESSAGE, message: message}),\n        }\n    }\n}\n\nlet titleInput;\nlet sourceCodeInput;\n\nfunction CreateProgramPageLayout(props) {\n    return (\n        <Container maxWidth=\"lg\">\n            <Title>Upload drone program for level \"{ props.level.title }\"</Title>\n            <form noValidate>\n                <Grid container spacing={2}>\n                    <Grid item xs={12} sm={6}>\n                        <TextField\n                            name=\"title\"\n                            variant=\"outlined\"\n                            required\n                            fullWidth\n                            id=\"title\"\n                            label=\"Title\"\n                            autoFocus\n                            InputProps={{\n                                inputRef: node => titleInput = node\n                            }}\n                            helperText=\"Just for scoreboard\"\n                        />\n                    </Grid>\n                </Grid>\n                <Grid container spacing={2}>\n                    <Grid item xs={12} md={6}>\n                        <TextField\n                            name=\"source_code\"\n                            variant=\"outlined\"\n                            required\n                            fullWidth\n                            id=\"source_Code\"\n                            label=\"Source Code\"\n                            multiline\n                            rows={20}\n                            InputProps={{\n                                inputRef: node => sourceCodeInput = node\n                            }}\n                            helperText=\"Use if statements, for loops, functions and other features from our Drone Language!\"\n                        />\n                    </Grid>\n                    <Grid item xs={12} md={6}>\n                        <Typography color=\"error\" paragraph>\n                            { props.compilationError }\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Button size=\"large\" variant=\"contained\" color=\"primary\" onClick={() => props.onCreateProgramButtonClick(props.level.id, titleInput.value, sourceCodeInput.value)}>\n                            Save program\n                        </Button>\n                    </Grid>\n                </Grid>\n            </form>\n        </Container>\n    )\n}\n\nexport default CreateProgramPageWrapper;","import React, {Component} from \"react\";\nimport {SHOW_MESSAGE} from \"../redux/actions\";\nimport {connect} from \"react-redux\";\nimport {Link, useParams} from \"react-router-dom\";\nimport {getLevel} from \"../api/levels\";\nimport LargeLoader from \"../components/LargeLoader\";\nimport Container from \"@material-ui/core/Container\";\nimport Title from \"../components/Title\";\nimport Grid from \"@material-ui/core/Grid\";\nimport {getProgram, runProgram} from \"../api/programs\";\nimport {Table, TableBody, TableHead, TextField} from \"@material-ui/core\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\n\nfunction ProgramPageWrapper(props) {\n    let params = useParams();\n    return <ProgramPage params={params} {...props}/>;\n}\n\nclass ProgramPage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaded: false,\n            level: {},\n            program: {},\n            params: [],\n            runError: \"\",\n            output: \"\",\n            score: null,\n        };\n        this.onChangeParam = this.onChangeParam.bind(this);\n        this.onRunProgram = this.onRunProgram.bind(this);\n    }\n\n    async componentDidMount() {\n        let id = this.props.params.id;\n        let response = await getLevel(id);\n        if (! response.success) {\n            this.props.showMessage(response.message ? response.message : \"Could not load level\");\n            return;\n        }\n        let level = response.level;\n\n        response = await getProgram(this.props.params.programId);\n        if (! response.success) {\n            this.props.showMessage(response.message ? response.message : \"Could not load program\");\n            return;\n        }\n        let program = response.program;\n\n        this.setState({\n            isLoaded: true,\n            level: level,\n            program: program,\n            params: [['', '']],\n            runErrorMessage: \"\",\n            output: \"\",\n            score: null,\n            success: null,\n        });\n    }\n\n    onChangeParam(paramIndex, index, newValue) {\n        this.setState(s => {\n            let params = s.params;\n            params[paramIndex][index] = newValue;\n            if (paramIndex === params.length - 1)\n                params.push(['', '']);\n            return {...s, params: params}\n        });\n    }\n\n    async onRunProgram(programId, params) {\n        let paramsMap = {};\n        params.forEach(({key, value}) => {\n            paramsMap[key] = value;\n        });\n        let response = await runProgram(programId, paramsMap);\n        if (! response.success) {\n            this.props.showMessage(response.message ? response.message : \"Can't run your program on drone\");\n            return;\n        }\n        if (response.error) {\n            this.setState({\n                runErrorMessage: response.errorMessage,\n                output: \"\",\n                score: null,\n                success: null,\n            });\n            return;\n        }\n\n        this.setState({\n            runErrorMessage: response.errorMessage,\n            output: response.output,\n            score: response.run.score,\n            success: response.run.success,\n        });\n    }\n\n    render() {\n        if (! this.state.isLoaded)\n            return <LargeLoader/>;\n        return <ProgramPageLayout level={this.state.level} program={this.state.program} params={this.state.params} runErrorMessage={this.state.runErrorMessage} output={this.state.output}\n                                  score={this.state.score} success={this.state.success}\n                                  onChangeParam={this.onChangeParam} onRunProgram={this.onRunProgram}/>\n    }\n\n    static mapDispatchToProps(dispatch) {\n        return {\n            showMessage: (message) => dispatch({type: SHOW_MESSAGE, message: message}),\n        }\n    }\n}\n\nfunction ProgramPageLayout(props) {\n    return (\n        <Container maxWidth=\"lg\">\n            <Title>\n                { props.program.title }\n            </Title>\n            <Grid container spacing={10}>\n                <Grid item xs={12} md={6}>\n                    <Typography gutterBottom paragraph>\n                        Run drone with this program on level \"{ props.level.title }\" with following parameters:\n                    </Typography>\n                    <Table stickyHeader>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>NAME</TableCell>\n                                <TableCell>VALUE</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                        {\n                            props.params.map((param, index) => (\n                                <TableRow key={index}>\n                                    <TableCell scope=\"row\">\n                                        <TextField\n                                            value={param[0]}\n                                            onChange={(event) => props.onChangeParam(index, 0, event.target.value)}\n                                            label={\"Name\"}\n                                        />\n                                    </TableCell>\n                                    <TableCell>\n                                        <TextField\n                                            value={param[1]}\n                                            onChange={(event) => props.onChangeParam(index, 1, event.target.value)}\n                                            label={\"Value\"}\n                                        />\n                                    </TableCell>\n                                </TableRow>\n                            ))\n                        }\n                        </TableBody>\n                    </Table>\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    {\n                        props.runErrorMessage &&\n                        <Typography color=\"error\">\n                            Error on running your program: {props.runErrorMessage}\n                        </Typography>\n                    }\n                    {\n                        props.success === false &&\n                            <Typography color=\"error\" variant=\"h4\">\n                                Your drone did not reach the finish :-(\n                            </Typography>\n                    }\n                    {\n                        props.success === true &&\n                            <React.Fragment>\n                                <Typography color=\"textPrimary\" variant=\"h4\">\n                                    Your program did { props.score} moves!\n                                </Typography>\n                                <Typography color=\"textSecondary\" variant=\"body1\" paragraph>\n                                    Return back to <Link to={\"/levels/\" + props.level.id}>other programs</Link>.\n                                </Typography>\n                            </React.Fragment>\n                    }\n                    <Typography color=\"primary\">\n                        { props.output }\n                    </Typography>\n                </Grid>\n                <Grid item xs={12}>\n                    <Button size=\"large\" variant=\"contained\" color=\"primary\" onClick={() => props.onRunProgram(props.program.id, props.params)}>\n                        Run drone!\n                    </Button>\n                </Grid>\n            </Grid>\n        </Container>\n    );\n}\n\nexport default connect(null, ProgramPage.mapDispatchToProps)(ProgramPageWrapper)","import React, { Component } from 'react';\nimport './App.css';\nimport {isAuthenticated, authenticate, logout, register} from \"./api/users\";\nimport {Switch, Route, withRouter} from \"react-router-dom\";\nimport LoginPage from \"./pages/LoginPage\";\nimport RegistrationPage from \"./pages/RegistrationPage\";\nimport {connect} from \"react-redux\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from '@material-ui/icons/Close';\nimport {LOGIN, LOGOUT, SHOW_MESSAGE} from \"./redux/actions\";\nimport LevelsPage from \"./pages/LevelsPage\";\nimport LargeLoader from \"./components/LargeLoader\";\nimport Header from \"./components/Header\";\nimport CreateLevelPage from \"./pages/CreateLevelPage\";\nimport LevelPage from \"./pages/LevelPage\";\nimport CreateProgramPage from \"./pages/CreateProgramPage\";\nimport ProgramPage from \"./pages/ProgramPage\";\n\nfunction AppWrapper(props) {\n    let AppWithConnect = connect(App.mapStateToProps, App.mapDispatchToProps)(App);\n    let AppWithRouter = withRouter(({ history }) => (<AppWithConnect history={history} {...props}/>));\n    return <AppWithRouter/>\n}\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaded: false,\n        };\n        this.onLoginButtonClick = this.onLoginButtonClick.bind(this);\n        this.onRegistrationButtonClick = this.onRegistrationButtonClick.bind(this);\n        this.onLogoutButtonClick = this.onLogoutButtonClick.bind(this);\n        this.onCloseSnackbar = this.onCloseSnackbar.bind(this);\n    }\n\n    async componentDidMount() {\n        let response = await isAuthenticated();\n        if (response.success) {\n            this.props.setUser(response.user);\n        }\n        this.setState({\n            isLoaded: true,\n        });\n    }\n\n    async onLoginButtonClick(login, password) {\n        let response = await authenticate(login, password);\n        if (! response.success) {\n            this.props.showMessage(response.message);\n            return;\n        }\n        this.props.setUser(response.user);\n        this.props.history.push(\"/\");\n    }\n\n    async onRegistrationButtonClick(name, login, password) {\n        let response = await register(name, login, password);\n        if (! response.success) {\n            this.props.showMessage(response.message);\n            return;\n        }\n        await this.onLoginButtonClick(login, password);\n    }\n\n    async onLogoutButtonClick() {\n        let response = await logout();\n        if (! response.success) {\n            this.props.showMessage(\"Can't log out\");\n            return;\n        }\n        this.props.logout()\n    }\n\n    onCloseSnackbar() {\n        this.props.clearMessage();\n    }\n\n    render() {\n        if (!this.state.isLoaded)\n            return <LargeLoader/>;\n\n        return (\n                <React.Fragment>\n                    {this.props.isAuthenticated && <Header user={this.props.user} onLogoutButtonClick={this.onLogoutButtonClick}/>}\n                    {!this.props.isAuthenticated && this.renderLayoutForNonAuthenticated()}\n                    {this.props.isAuthenticated && this.renderLayoutForAuthenticated()}\n                    <Snackbar\n                            anchorOrigin={{\n                                vertical: 'bottom',\n                                horizontal: 'right',\n                            }}\n                            open={this.props.message !== \"\"}\n                            autoHideDuration={2000}\n                            onClose={this.onCloseSnackbar}\n                            ContentProps={{\n                                'aria-describedby': 'message-id',\n                            }}\n                            message={<span id=\"message-id\">{this.props.message}</span>}\n                            action={[\n                                <IconButton\n                                        key=\"close\"\n                                        aria-label=\"close\"\n                                        color=\"inherit\"\n                                        onClick={this.onCloseSnackbar}\n                                >\n                                    <CloseIcon />\n                                </IconButton>,\n                            ]}\n                    />\n                </React.Fragment>\n        );\n    }\n\n    renderLayoutForNonAuthenticated() {\n        return (<Switch>\n            <Route exact path=\"/registration\">\n                <RegistrationPage onRegistrationButtonClick={this.onRegistrationButtonClick}/>\n            </Route>\n            <Route exact path=\"/login\">\n                <LoginPage onLoginButtonClick={this.onLoginButtonClick}/>\n            </Route>\n            <Route>\n                <LoginPage onLoginButtonClick={this.onLoginButtonClick}/>\n            </Route>\n        </Switch>);\n    }\n\n    renderLayoutForAuthenticated() {\n        return (\n            <main style={{\"paddingTop\": \"32px\", \"paddingBottom\": \"32px\"}}>\n                <Switch>\n                    <Route exact path=\"/levels\">\n                        <LevelsPage />\n                    </Route>\n                    <Route exact path=\"/levels/new\">\n                        <CreateLevelPage />\n                    </Route>\n                    <Route exact path=\"/levels/:id\">\n                        <LevelPage />\n                    </Route>\n                    <Route exact path=\"/levels/:id/program\">\n                        <CreateProgramPage />\n                    </Route>\n                    <Route exact path=\"/levels/:id/programs/:programId\">\n                        <ProgramPage />\n                    </Route>\n                    <Route>\n                        <LevelsPage />\n                    </Route>\n             </Switch>\n            </main>\n        )\n    }\n\n    static mapStateToProps(state) {\n        return {\n            isAuthenticated: state.isAuthenticated,\n            user: state.user,\n            message: state.message,\n        }\n    }\n\n    static mapDispatchToProps(dispatch) {\n        return {\n            showMessage: message => dispatch({type: SHOW_MESSAGE, message: message}),\n            clearMessage: () => dispatch({type: SHOW_MESSAGE, message: ''}),\n            setUser: user => dispatch({type: LOGIN, user: user}),\n            logout: () => dispatch({type: LOGOUT}),\n        }\n    }\n}\n\nexport default AppWrapper;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {LOGIN, LOGOUT, SHOW_MESSAGE} from \"./actions\"\n\nexport const initialState = {\n    isAuthenticated: false,\n    user: {},\n    message: \"\"\n};\n\nexport function reduce(state = initialState, action) {\n    switch (action.type) {\n        case LOGIN:\n            return {\n                ...state,\n                isAuthenticated: true,\n                user: action.user,\n            };\n        case LOGOUT:\n            return {\n                ...state,\n                isAuthenticated: false,\n                user: {},\n            };\n        case SHOW_MESSAGE:\n            return {\n                ...state,\n                message: action.message,\n            };\n        default:\n            return state\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {createStore} from \"redux\";\nimport {reduce} from \"./redux/state\";\nimport {BrowserRouter} from \"react-router-dom\";\n\nlet store = createStore(reduce);\n\nReactDOM.render(<Provider store={store}><BrowserRouter><App /></BrowserRouter></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/drone.274d55f7.jpg\";"],"sourceRoot":""}