using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using SPN;

namespace SePtoN_Exploit
{
	class Program
	{
		static void Main(string[] args)
		{
//			ProofOfConecpt.Do();
//			return;

			if(args.Length < 1)
			{
				Console.WriteLine("Usage: sploit.exe <fileToDecrypt> [expectedKey]");
				Environment.Exit(1);
			}

			var expectedKey = args.Length >= 2 ? File.ReadAllBytes(args[1]) : new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

			byte[] imageBytes;
			try
			{
				imageBytes = File.ReadAllBytes(args[0]);
			}
			catch(Exception e)
			{
				Console.WriteLine($"Can't read data from file {args[0]}", e);
				Environment.Exit(1);
				return;
			}

			var spn = new SubstitutionPermutationNetwork(SubstitutionPermutationNetwork.GenerateRandomKey());

			var pairs = GeneratePlainEncryptedPairs(imageBytes);
			var plains = pairs.Select(tuple => tuple.Item1).ToArray();
			var encs = pairs.Select(tuple => tuple.Item2).ToArray();

			var linearCryptoanalysis = new LinearCryptoanalysis(spn);
			var bestLayerApproximations = linearCryptoanalysis.ChooseBestPathsStartingFromSingleSBoxInRound0(Exploit.maxSBoxesInLastRound, Exploit.maxSBoxesInRound, Exploit.thresholdBias).ToList();
			Console.WriteLine($"Total approximations: {bestLayerApproximations.Count}");

			var solutions = new List<Solution>();
			foreach(var approximationsGroup in bestLayerApproximations
				.Where(layer => layer.round0sboxNum % 8 == 3 || (layer.round0sboxNum % 8 == 4 && ((layer.round0x & 0x01) == 0)))
				.GroupBy(layer => layer.ActivatedSboxesNums.Aggregate("", (s, num) => s + num))
				.OrderBy(group => group.Key))
			{
				foreach(var approximation in approximationsGroup.Distinct().OrderByDescending(layer => layer.inputProbability.Bias()).Take(6))
					solutions.AddRange(Exploit.HackApproximation(plains, encs, approximation, expectedKey));
			}

			var solutionsDict = Exploit.OrderSolutions(solutions, expectedKey);

			var imageLength = imageBytes.Length - SubstitutionPermutationNetwork.GenerateRandomIV().Length;
			if(imageLength >= 65536)
				throw new Exception("Unexpected image ciphertext length");

			var plaintextPrefixFrom4 = new byte[] { 0, 0, 0, 0, 0, 0, 0x36, 0, 0, 0 };
			var hackedKey = GetFinalSolution(solutionsDict, imageBytes.Take(24).ToArray(), plaintextPrefixFrom4);
			if(hackedKey != null)
				Console.WriteLine($"\nHACKED KEY: {hackedKey.ToHexUpperCase()}");
			else
				Console.WriteLine("BAD LUCK. Key not hacked");
		}

		private static byte[] GetFinalSolution(Dictionary<int, List<byte>> solutionsDict, byte[] ciphertextBlocks, byte[] expectedPlaintextPrefixFrom4)
		{
			var key = new byte[SubstitutionPermutationNetwork.KeySizeBytes];

			byte b = 0;
			var keyLengthInHex = SubstitutionPermutationNetwork.KeySizeBytes * 8 / SBox.BitSize;
			for(int hexNumPos = 0; hexNumPos < keyLengthInHex; hexNumPos++)
			{
				byte hexNum = 0;
				if(solutionsDict.ContainsKey(hexNumPos))
					hexNum = solutionsDict[hexNumPos].First(); //TODO this position definitely needs to be bruted

				b |= (byte)(hexNum << (hexNumPos % 2 == 0 ? 4 : 0));

				if(hexNumPos % 2 == 1)
				{
					key[hexNumPos / 2] = b;
					b = 0;
				}
			}
			var spn = new SubstitutionPermutationNetwork(key);

			for(int d1pos = 0; d1pos < keyLengthInHex; d1pos++)
			{
				for(int d2pos = 0; d2pos < keyLengthInHex; d2pos++)
				{
					if(d2pos == d1pos)
						continue;
					for(int d3pos = 0; d3pos < keyLengthInHex; d3pos++)
					{
						if(d3pos == d1pos || d3pos == d2pos)
							continue;

						var d1prev = GetHex(key, d1pos);
						//TODO itarate solutionsDict, not full brute!

						for(byte d1v = 0; d1v < 16; d1v++)
						{
							SetHex(key, d1pos, d1v);

							var d2prev = GetHex(key, d2pos);
							for(byte d2v = 0; d2v < 16; d2v++)
							{
								SetHex(key, d2pos, d2v);

								byte d3prev = GetHex(key, d3pos);
								for(byte d3v = 0; d3v < 16; d3v++)
								{
									spn.MasterKey = key;
									var plaintextBlocks = spn.DecryptCBC(ciphertextBlocks);
									if(StartsWith(plaintextBlocks, 4, expectedPlaintextPrefixFrom4))
										return key;
								}
								SetHex(key, d3pos, d3prev);
							}
							SetHex(key, d2pos, d2prev);
						}
						SetHex(key, d1pos, d1prev);
					}
				}
			}
			return null;
		}

		private static byte GetHex(byte[] arr, int hexPos)
		{
			byte prev;
			if(hexPos % 2 == 0)
				prev = (byte)((arr[hexPos / 2] & 0xF0) >> 4);
			else
				prev = (byte)(arr[hexPos / 2] & 0x0F);
			return prev;
		}

		private static void SetHex(byte[] arr, int hexPos, byte value)
		{
			if(hexPos % 2 == 0)
			{
				arr[hexPos / 2] &= 0x0F;
				arr[hexPos / 2] |= (byte)(value << 4);
			}
			else
			{
				arr[hexPos / 2] &= 0xF0;
				arr[hexPos / 2] |= value;
			}
		}

		private static bool StartsWith(byte[] data, int dataOffset, byte[] prefix)
		{
			for(int i = 0; i < prefix.Length; i++)
			{
				if(data[dataOffset + i] != prefix[i])
					return false;
			}
			return true;
		}

		private static List<(byte[], byte[])> GeneratePlainEncryptedPairs(byte[] imageBytes)
		{
			var result = new List<(byte[], byte[])>();
			var prefixWithEncryptedPixels = imageBytes.Skip(SubstitutionPermutationNetwork.GenerateRandomIV().Length + 0x38 - SubstitutionPermutationNetwork.BlockSizeBytes).ToList();
			for(int i = SubstitutionPermutationNetwork.BlockSizeBytes; i < prefixWithEncryptedPixels.Count - SubstitutionPermutationNetwork.BlockSizeBytes; i += SubstitutionPermutationNetwork.BlockSizeBytes)
			{
				var prevC = prefixWithEncryptedPixels.Skip(i - SubstitutionPermutationNetwork.BlockSizeBytes).Take(SubstitutionPermutationNetwork.BlockSizeBytes).ToArray();
				var c = prefixWithEncryptedPixels.Skip(i).Take(SubstitutionPermutationNetwork.BlockSizeBytes).ToArray();

				var expectedP = new byte[] { 0, 0xFF, 0, 0, 0, 0xFF, 0, 0};

				var input = SubstitutionPermutationNetwork.XorBlock(prevC, expectedP);
				result.Add((input, c));
			}
			return result;
		}
	}
}
